export declare const libDef: {
    readonly name: "@azure-tools/cadl-rpaas";
    readonly diagnostics: {
        readonly "decorator-wrong-type": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "Decorator can only be applied to model types.";
                readonly armCommonDefinition: "The @armCommonDefinition decorator can only be applied to models.";
                readonly armCommonParameter: "The @armCommonParameter decorator can only be applied to model properties and operation parameters.";
                readonly armNamespace: "The @armNamespace decorator can only be applied to namespaces.";
                readonly armResourceOperations: "The @armResourceOperations decorator can only be applied to namespaces.";
                readonly armOperation: "The @armOperation decorator can only be applied to operations.";
                readonly armListBy: "The @armListBy decorator can only be applied to models.";
                readonly armResource: "The @armResource decorator can only be applied to models.";
            };
        };
        readonly "decorator-param-wrong-type": {
            readonly severity: "error";
            readonly messages: {
                readonly armResource: "The parameter to @armResource must be a model expression.";
                readonly armResourceParameterType: "The @armResource decorator only accepts model types for the resource parameter type.";
                readonly armResourceStandardOperation: "Standard operation value must be a string";
                readonly armResourceResourceProperty: "Resource property type must be a model type.";
            };
        };
        readonly "arm-resource-operations-with-resource-path": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "The @armResourceOperations decorator can only be used for resource types that have an @armResourcePath configured.";
            };
        };
        readonly "arm-resource-missing-arm-namespace": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "The @armNamespace decorator must be used to define the ARM namespace of the service.  This is best applied to the file-level namespace.";
            };
        };
        readonly "arm-resource-missing": {
            readonly severity: "error";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
            };
        };
        readonly "decorator-in-namespace": {
            readonly severity: "error";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
            };
        };
        readonly "arm-operation-in-namespace-with-resource-operations": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "The @armOperation decorator can only be applied to an operation that is defined inside of a namespace marked with @armResourceOperations.";
            };
        };
        readonly "decorator-with-resource-path": {
            readonly severity: "error";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
            };
        };
        readonly "unknown-std-operation": {
            readonly severity: "error";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["operation"]>;
            };
        };
        readonly "list-operation-with-resource-path": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "List operations can only be created for a resource type with a resource path.";
            };
        };
        readonly "parameter-in-resource": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "Parameter type not a part of the resource";
            };
        };
        readonly "tracked-resource-provisioning-state": {
            readonly severity: "error";
            readonly messages: {
                readonly missing: "A TrackedResource must have a 'provisioningState' property of type 'enum' to track the provisioningState of the last operation. The enum must include values 'Failed', 'Succeeded', and 'Canceled'.";
                readonly wrongType: import("@cadl-lang/compiler").CallableMessage<["name", "missingStates"]>;
            };
        };
        readonly "path-parameter-type": {
            readonly severity: "error";
            readonly messages: {
                readonly default: "Path parameter type must be a model.";
                readonly singleProp: "Path parameter type must have exactly one property.";
                readonly string: "Path parameter type must be a string.";
            };
        };
        readonly "missing-required-prop": {
            readonly severity: "error";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["propertyName"]>;
            };
        };
        readonly "invalid-type-prop": {
            readonly severity: "error";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["type", "valueType"]>;
            };
        };
        readonly "parent-type": {
            readonly severity: "error";
            readonly messages: {
                readonly missingResourcePath: "Parent type has no resource path parameter specified";
                readonly missingResourceName: "Parent type has no resource name parameter specified";
            };
        };
        readonly "no-underscore-in-operation-name": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: "The operation name should not contain underscore, or it will produce invalid operationId in the generated swagger.";
            };
        };
        readonly "no-repeated-resource-in-operation": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: import("@cadl-lang/compiler").CallableMessage<["resourceModelName"]>;
            };
        };
        readonly "no-inline-model": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: "Inline models cannot be represented in many languages. Using this pattern can result in bad auto naming. ";
            };
        };
        readonly "model-requires-documentation": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: "The model must have a documentation or description , please use decorator @doc to add it.";
            };
        };
        readonly "property-requires-documentation": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: "The property must have a documentation or description , please use decorator @doc to add it.";
            };
        };
        readonly "operation-requires-documentation": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: "The operation must have a documentation or description , please use decorator @doc to add it.";
            };
        };
        readonly "documentation-different-with-node-name": {
            readonly severity: "warning";
            readonly messages: {
                readonly default: "The documentation should not be the same as the node name.";
            };
        };
    };
};
export declare const reportDiagnostic: <C extends "decorator-wrong-type" | "decorator-param-wrong-type" | "arm-resource-operations-with-resource-path" | "arm-resource-missing-arm-namespace" | "arm-resource-missing" | "decorator-in-namespace" | "arm-operation-in-namespace-with-resource-operations" | "decorator-with-resource-path" | "unknown-std-operation" | "list-operation-with-resource-path" | "parameter-in-resource" | "tracked-resource-provisioning-state" | "path-parameter-type" | "missing-required-prop" | "invalid-type-prop" | "parent-type" | "no-underscore-in-operation-name" | "no-repeated-resource-in-operation" | "no-inline-model" | "model-requires-documentation" | "property-requires-documentation" | "operation-requires-documentation" | "documentation-different-with-node-name", M extends keyof {
    "decorator-wrong-type": {
        readonly default: "Decorator can only be applied to model types.";
        readonly armCommonDefinition: "The @armCommonDefinition decorator can only be applied to models.";
        readonly armCommonParameter: "The @armCommonParameter decorator can only be applied to model properties and operation parameters.";
        readonly armNamespace: "The @armNamespace decorator can only be applied to namespaces.";
        readonly armResourceOperations: "The @armResourceOperations decorator can only be applied to namespaces.";
        readonly armOperation: "The @armOperation decorator can only be applied to operations.";
        readonly armListBy: "The @armListBy decorator can only be applied to models.";
        readonly armResource: "The @armResource decorator can only be applied to models.";
    };
    "decorator-param-wrong-type": {
        readonly armResource: "The parameter to @armResource must be a model expression.";
        readonly armResourceParameterType: "The @armResource decorator only accepts model types for the resource parameter type.";
        readonly armResourceStandardOperation: "Standard operation value must be a string";
        readonly armResourceResourceProperty: "Resource property type must be a model type.";
    };
    "arm-resource-operations-with-resource-path": {
        readonly default: "The @armResourceOperations decorator can only be used for resource types that have an @armResourcePath configured.";
    };
    "arm-resource-missing-arm-namespace": {
        readonly default: "The @armNamespace decorator must be used to define the ARM namespace of the service.  This is best applied to the file-level namespace.";
    };
    "arm-resource-missing": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
    };
    "decorator-in-namespace": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
    };
    "arm-operation-in-namespace-with-resource-operations": {
        readonly default: "The @armOperation decorator can only be applied to an operation that is defined inside of a namespace marked with @armResourceOperations.";
    };
    "decorator-with-resource-path": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
    };
    "unknown-std-operation": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["operation"]>;
    };
    "list-operation-with-resource-path": {
        readonly default: "List operations can only be created for a resource type with a resource path.";
    };
    "parameter-in-resource": {
        readonly default: "Parameter type not a part of the resource";
    };
    "tracked-resource-provisioning-state": {
        readonly missing: "A TrackedResource must have a 'provisioningState' property of type 'enum' to track the provisioningState of the last operation. The enum must include values 'Failed', 'Succeeded', and 'Canceled'.";
        readonly wrongType: import("@cadl-lang/compiler").CallableMessage<["name", "missingStates"]>;
    };
    "path-parameter-type": {
        readonly default: "Path parameter type must be a model.";
        readonly singleProp: "Path parameter type must have exactly one property.";
        readonly string: "Path parameter type must be a string.";
    };
    "missing-required-prop": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["propertyName"]>;
    };
    "invalid-type-prop": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type", "valueType"]>;
    };
    "parent-type": {
        readonly missingResourcePath: "Parent type has no resource path parameter specified";
        readonly missingResourceName: "Parent type has no resource name parameter specified";
    };
    "no-underscore-in-operation-name": {
        readonly default: "The operation name should not contain underscore, or it will produce invalid operationId in the generated swagger.";
    };
    "no-repeated-resource-in-operation": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["resourceModelName"]>;
    };
    "no-inline-model": {
        readonly default: "Inline models cannot be represented in many languages. Using this pattern can result in bad auto naming. ";
    };
    "model-requires-documentation": {
        readonly default: "The model must have a documentation or description , please use decorator @doc to add it.";
    };
    "property-requires-documentation": {
        readonly default: "The property must have a documentation or description , please use decorator @doc to add it.";
    };
    "operation-requires-documentation": {
        readonly default: "The operation must have a documentation or description , please use decorator @doc to add it.";
    };
    "documentation-different-with-node-name": {
        readonly default: "The documentation should not be the same as the node name.";
    };
}[C] = "default">(program: import("@cadl-lang/compiler").Program, diag: import("@cadl-lang/compiler").DiagnosticReport<{
    "decorator-wrong-type": {
        readonly default: "Decorator can only be applied to model types.";
        readonly armCommonDefinition: "The @armCommonDefinition decorator can only be applied to models.";
        readonly armCommonParameter: "The @armCommonParameter decorator can only be applied to model properties and operation parameters.";
        readonly armNamespace: "The @armNamespace decorator can only be applied to namespaces.";
        readonly armResourceOperations: "The @armResourceOperations decorator can only be applied to namespaces.";
        readonly armOperation: "The @armOperation decorator can only be applied to operations.";
        readonly armListBy: "The @armListBy decorator can only be applied to models.";
        readonly armResource: "The @armResource decorator can only be applied to models.";
    };
    "decorator-param-wrong-type": {
        readonly armResource: "The parameter to @armResource must be a model expression.";
        readonly armResourceParameterType: "The @armResource decorator only accepts model types for the resource parameter type.";
        readonly armResourceStandardOperation: "Standard operation value must be a string";
        readonly armResourceResourceProperty: "Resource property type must be a model type.";
    };
    "arm-resource-operations-with-resource-path": {
        readonly default: "The @armResourceOperations decorator can only be used for resource types that have an @armResourcePath configured.";
    };
    "arm-resource-missing-arm-namespace": {
        readonly default: "The @armNamespace decorator must be used to define the ARM namespace of the service.  This is best applied to the file-level namespace.";
    };
    "arm-resource-missing": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
    };
    "decorator-in-namespace": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
    };
    "arm-operation-in-namespace-with-resource-operations": {
        readonly default: "The @armOperation decorator can only be applied to an operation that is defined inside of a namespace marked with @armResourceOperations.";
    };
    "decorator-with-resource-path": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
    };
    "unknown-std-operation": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["operation"]>;
    };
    "list-operation-with-resource-path": {
        readonly default: "List operations can only be created for a resource type with a resource path.";
    };
    "parameter-in-resource": {
        readonly default: "Parameter type not a part of the resource";
    };
    "tracked-resource-provisioning-state": {
        readonly missing: "A TrackedResource must have a 'provisioningState' property of type 'enum' to track the provisioningState of the last operation. The enum must include values 'Failed', 'Succeeded', and 'Canceled'.";
        readonly wrongType: import("@cadl-lang/compiler").CallableMessage<["name", "missingStates"]>;
    };
    "path-parameter-type": {
        readonly default: "Path parameter type must be a model.";
        readonly singleProp: "Path parameter type must have exactly one property.";
        readonly string: "Path parameter type must be a string.";
    };
    "missing-required-prop": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["propertyName"]>;
    };
    "invalid-type-prop": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type", "valueType"]>;
    };
    "parent-type": {
        readonly missingResourcePath: "Parent type has no resource path parameter specified";
        readonly missingResourceName: "Parent type has no resource name parameter specified";
    };
    "no-underscore-in-operation-name": {
        readonly default: "The operation name should not contain underscore, or it will produce invalid operationId in the generated swagger.";
    };
    "no-repeated-resource-in-operation": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["resourceModelName"]>;
    };
    "no-inline-model": {
        readonly default: "Inline models cannot be represented in many languages. Using this pattern can result in bad auto naming. ";
    };
    "model-requires-documentation": {
        readonly default: "The model must have a documentation or description , please use decorator @doc to add it.";
    };
    "property-requires-documentation": {
        readonly default: "The property must have a documentation or description , please use decorator @doc to add it.";
    };
    "operation-requires-documentation": {
        readonly default: "The operation must have a documentation or description , please use decorator @doc to add it.";
    };
    "documentation-different-with-node-name": {
        readonly default: "The documentation should not be the same as the node name.";
    };
}, C, M>) => void;
//# sourceMappingURL=lib.d.ts.map