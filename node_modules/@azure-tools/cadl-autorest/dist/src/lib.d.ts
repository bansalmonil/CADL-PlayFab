export declare const reportDiagnostic: <C extends "decorator-wrong-type" | "security-service-namespace" | "resource-namespace" | "missing-path-param" | "duplicate-body" | "duplicate-body-types" | "content-type-string" | "invalid-schema" | "union-null" | "union-unsupported" | "invalid-default", M extends keyof {
    "decorator-wrong-type": {
        readonly modelsOperations: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
    };
    "security-service-namespace": {
        readonly default: "Cannot add security details to a namespace other than the service namespace.";
    };
    "resource-namespace": {
        readonly default: "Resource goes on namespace";
    };
    "missing-path-param": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Duplicate @body declarations on response type";
    };
    "duplicate-body-types": {
        readonly default: "Request has multiple body types";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string or union of strings";
        readonly unionOfString: "The contentType property union must contain only string values";
    };
    "invalid-schema": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
    };
    "union-null": {
        readonly default: "Cannot have a union containing only null types.";
    };
    "union-unsupported": {
        readonly default: "Unions cannot be emitted to OpenAPI v2 unless all options are literals of the same type.";
        readonly null: "Unions containing multiple model types cannot be emitted to OpenAPI v2 unless the union is between one model type and 'null'.";
    };
    "invalid-default": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
    };
}[C] = "default">(program: import("@cadl-lang/compiler").Program, diag: import("@cadl-lang/compiler").DiagnosticReport<{
    "decorator-wrong-type": {
        readonly modelsOperations: import("@cadl-lang/compiler").CallableMessage<["decoratorName"]>;
    };
    "security-service-namespace": {
        readonly default: "Cannot add security details to a namespace other than the service namespace.";
    };
    "resource-namespace": {
        readonly default: "Resource goes on namespace";
    };
    "missing-path-param": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["param"]>;
    };
    "duplicate-body": {
        readonly default: "Duplicate @body declarations on response type";
    };
    "duplicate-body-types": {
        readonly default: "Request has multiple body types";
    };
    "content-type-string": {
        readonly default: "contentType parameter must be a string or union of strings";
        readonly unionOfString: "The contentType property union must contain only string values";
    };
    "invalid-schema": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
    };
    "union-null": {
        readonly default: "Cannot have a union containing only null types.";
    };
    "union-unsupported": {
        readonly default: "Unions cannot be emitted to OpenAPI v2 unless all options are literals of the same type.";
        readonly null: "Unions containing multiple model types cannot be emitted to OpenAPI v2 unless the union is between one model type and 'null'.";
    };
    "invalid-default": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["type"]>;
    };
}, C, M>) => void;
//# sourceMappingURL=lib.d.ts.map