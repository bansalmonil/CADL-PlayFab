import { NamespaceType, OperationType, Program, Type } from "@cadl-lang/compiler";
export declare const restLib: import("@cadl-lang/compiler").CadlLibrary<{
    "service-title-namespace-only": {
        readonly default: "The @serviceTitle decorator can only be applied to namespaces.";
    };
    "service-title-duplicate": {
        readonly default: "Service title can only be set once per Cadl document.";
    };
    "service-host-duplicate": {
        readonly default: "Service host can only be set once per Cadl document.";
    };
    "service-host-namespace-only": {
        readonly default: "The @serviceHost decorator can only be applied to namespaces.";
    };
    "service-version-duplicate": {
        readonly default: "Service version can only be set once per Cadl document.";
    };
    "service-version-namespace-only": {
        readonly default: "The @serviceVersion decorator can only be applied to namespaces.";
    };
    "produces-namespace-only": {
        readonly default: "The @produces decorator can only be applied to namespaces.";
    };
    "consumes-namespace-only": {
        readonly default: "The @consumes decorator can only be applied to namespaces.";
    };
    "service-namespace-duplicate": {
        readonly default: "Cannot set service namespace more than once in an Cadl project.";
    };
    "http-verb-duplicate": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["entityName"]>;
    };
    "http-verb-wrong-type": {
        readonly default: import("@cadl-lang/compiler").CallableMessage<["verb", "entityKind"]>;
    };
}>;
export interface HttpOperationType extends OperationType {
    basePath: string;
    route: OperationRoute;
}
export declare function getHttpOperation(program: Program, operation: OperationType): HttpOperationType | undefined;
export declare function $resource(program: Program, entity: Type, basePath?: string): void;
export declare function getResources(program: Program): any[];
export declare function isResource(program: Program, obj: Type): boolean;
export declare function basePathForResource(program: Program, resource: Type): any;
export declare function $header(program: Program, entity: Type, headerName: string): void;
export declare function getHeaderFieldName(program: Program, entity: Type): any;
export declare function isHeader(program: Program, entity: Type): boolean;
export declare function $query(program: Program, entity: Type, queryKey: string): void;
export declare function getQueryParamName(program: Program, entity: Type): any;
export declare function isQueryParam(program: Program, entity: Type): boolean;
export declare function $path(program: Program, entity: Type, paramName: string): void;
export declare function getPathParamName(program: Program, entity: Type): any;
export declare function isPathParam(program: Program, entity: Type): boolean;
export declare function $body(program: Program, entity: Type): void;
export declare function isBody(program: Program, entity: Type): boolean;
export declare type HttpVerb = "get" | "put" | "post" | "patch" | "delete";
interface OperationRoute {
    verb: HttpVerb;
    subPath?: string;
}
export declare function getOperationRoute(program: Program, entity: Type): OperationRoute | undefined;
export declare function $get(program: Program, entity: Type, subPath?: string): void;
export declare function $put(program: Program, entity: Type, subPath?: string): void;
export declare function $post(program: Program, entity: Type, subPath?: string): void;
export declare function $patch(program: Program, entity: Type, subPath?: string): void;
export declare function $delete(program: Program, entity: Type, subPath?: string): void;
export declare function setServiceNamespace(program: Program, namespace: NamespaceType): void;
export declare function checkIfServiceNamespace(program: Program, namespace: NamespaceType): boolean;
export declare function $serviceTitle(program: Program, entity: Type, title: string): void;
export declare function getServiceTitle(program: Program): string;
export declare function $serviceHost(program: Program, entity: Type, host: string): void;
export declare function getServiceHost(program: Program): string | undefined;
export declare function setServiceHost(program: Program, host: string): void;
export declare function $serviceVersion(program: Program, entity: Type, version: string): void;
export declare function getServiceVersion(program: Program): string;
export declare function getServiceNamespaceString(program: Program): string | undefined;
export declare function $produces(program: Program, entity: Type, ...contentTypes: string[]): void;
export declare function getProduces(program: Program, entity: Type): string[];
export declare function $consumes(program: Program, entity: Type, ...contentTypes: string[]): void;
export declare function getConsumes(program: Program, entity: Type): string[];
export {};
//# sourceMappingURL=rest.d.ts.map