import { Program } from "./program.js";
import { BooleanLiteralNode, BooleanLiteralType, CadlScriptNode, JsSourceFile, LiteralNode, LiteralType, ModelPropertyNode, ModelTypeProperty, NamespaceStatementNode, NamespaceType, Node, NumericLiteralNode, NumericLiteralType, StringLiteralNode, StringLiteralType, Sym, Type, UnionExpressionNode, UnionType } from "./types.js";
export interface Checker {
    getTypeForNode(node: Node): Type;
    mergeJsSourceFile(file: JsSourceFile): void;
    mergeCadlSourceFile(file: CadlScriptNode): void;
    setUsingsForFile(file: CadlScriptNode): void;
    checkProgram(): void;
    checkSourceFile(file: CadlScriptNode): void;
    checkModelProperty(prop: ModelPropertyNode): ModelTypeProperty;
    checkUnionExpression(node: UnionExpressionNode): UnionType;
    getGlobalNamespaceType(): NamespaceType;
    getGlobalNamespaceNode(): NamespaceStatementNode;
    getMergedSymbol(sym: Sym | undefined): Sym | undefined;
    getMergedNamespace(node: NamespaceStatementNode): NamespaceStatementNode;
    getLiteralType(node: StringLiteralNode): StringLiteralType;
    getLiteralType(node: NumericLiteralNode): NumericLiteralType;
    getLiteralType(node: BooleanLiteralNode): BooleanLiteralType;
    getLiteralType(node: LiteralNode): LiteralType;
    getTypeName(type: Type): string;
    getNamespaceString(type: NamespaceType | undefined): string;
    cloneType<T extends Type>(type: T): T;
}
export declare function createChecker(program: Program): Checker;
//# sourceMappingURL=checker.d.ts.map