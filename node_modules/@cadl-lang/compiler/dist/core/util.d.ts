import { DiagnosticHandler } from "./diagnostics.js";
import { CompilerHost, DiagnosticTarget, SourceFile } from "./types.js";
export declare const cadlVersion: string;
export declare function deepFreeze<T>(value: T): T;
export declare function deepClone<T>(value: T): T;
export interface FileHandlingOptions {
    allowFileNotFound?: boolean;
    diagnosticTarget?: DiagnosticTarget;
    jsDiagnosticTarget?: DiagnosticTarget;
}
export declare function doIO<T>(action: (path: string) => Promise<T>, path: string, reportDiagnostic: DiagnosticHandler, options?: FileHandlingOptions): Promise<T | undefined>;
export declare function loadFile<T>(host: CompilerHost, path: string, load: (contents: string) => T, reportDiagnostic: DiagnosticHandler, options?: FileHandlingOptions): Promise<[T | undefined, SourceFile]>;
export declare const NodeHost: CompilerHost;
export declare function readUrlOrPath(host: CompilerHost, pathOrUrl: string): Promise<SourceFile>;
export declare function resolveRelativeUrlOrPath(base: string, relativeOrAbsolute: string): string;
//# sourceMappingURL=util.d.ts.map