import { TypeOfDiagnostics } from "./types.js";
declare const diagnostics: {
    /**
     * Scanner errors.
     */
    readonly "digit-expected": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Digit expected.";
        };
    };
    readonly "hex-digit-expected": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Hexadecimal digit expected.";
        };
    };
    readonly "binary-digit-expected": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Binary digit expected.";
        };
    };
    readonly unterminated: {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["token"]>;
        };
    };
    readonly "creating-file": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["filename", "error"]>;
        };
    };
    readonly "invalid-escape-sequence": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Invalid escape sequence.";
        };
    };
    readonly "no-new-line-start-triple-quote": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "String content in triple quotes must begin on a new line.";
        };
    };
    readonly "no-new-line-end-triple-quote": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Closing triple quotes must begin on a new line.";
        };
    };
    readonly "triple-quote-indent": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "All lines in triple-quoted string lines must have the same indentation as closing triple quotes.";
        };
    };
    readonly "invalid-character": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Invalid character.";
        };
    };
    /**
     * Utils
     */
    readonly "file-not-found": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["path"]>;
        };
    };
    readonly "file-load": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["message"]>;
        };
    };
    /**
     * Parser errors.
     */
    readonly "multiple-blockless-namespace": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot use multiple blockless namespaces.";
        };
    };
    readonly "blockless-namespace-first": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Blockless namespaces can't follow other declarations.";
            readonly topLevel: "Blockless namespace can only be top-level.";
        };
    };
    readonly "import-first": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Imports must come prior to namespaces or other declarations.";
            readonly topLevel: "Imports must be top-level and come prior to namespaces or other declarations.";
        };
    };
    readonly "default-optional": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot use default with non optional properties";
        };
    };
    readonly "token-expected": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["token"]>;
            readonly unexpected: import("./types.js").CallableMessage<["token"]>;
            readonly numericOrStringLiteral: "Expected numeric or string literal";
            readonly identifer: "Identifier expected.";
            readonly expression: "Expression expected.";
            readonly statement: "Statement expected.";
            readonly property: "Property expected.";
            readonly enumMember: "Enum member expected.";
        };
    };
    readonly "trailing-token": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["token"]>;
        };
    };
    readonly "unknown-directive": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["id"]>;
        };
    };
    readonly "reserverd-identifier": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Keyword cannot be used as identifier.";
        };
    };
    readonly "invalid-directive-location": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["nodeName"]>;
        };
    };
    readonly "invalid-decorator-location": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["nodeName"]>;
        };
    };
    /**
     * Checker
     */
    readonly "using-invalid-ref": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Using must refer to a namespace";
            readonly decorator: "Can't use a decorator";
        };
    };
    readonly "invalid-type-ref": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Invalid type reference";
            readonly decorator: "Can't put a decorator in a type";
        };
    };
    readonly "invalid-template-args": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Invalid template arguments.";
            readonly notTemplate: "Can't pass template arguments to non-templated type";
            readonly tooFew: "Too few template arguments provided.";
            readonly tooMany: "Too many template arguments provided.";
        };
    };
    readonly "intersect-non-model": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot intersect non-model types (including union types).";
        };
    };
    readonly "intersect-duplicate-property": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["propName"]>;
        };
    };
    readonly "unknown-identifier": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["id"]>;
        };
    };
    readonly "unknown-decorator": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Unknown decorator";
        };
    };
    readonly "invalid-decorator": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["id"]>;
        };
    };
    readonly "invalid-ref": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["id"]>;
            readonly inDecorator: import("./types.js").CallableMessage<["id"]>;
            readonly underNamespace: import("./types.js").CallableMessage<["id"]>;
            readonly node: import("./types.js").CallableMessage<["id", "nodeName"]>;
        };
    };
    readonly "duplicate-property": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["propName"]>;
        };
    };
    readonly "override-property": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["propName"]>;
        };
    };
    readonly "extend-model": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Models must extend other models.";
        };
    };
    readonly "is-model": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Model `is` must specify another model.";
        };
    };
    readonly "spread-model": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot spread properties of non-model type.";
        };
    };
    readonly "unsupported-default": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["type"]>;
        };
    };
    readonly "invalid-default-type": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["type"]>;
        };
    };
    readonly "mixes-interface": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Interfaces can only mix other interfaces";
        };
    };
    readonly "mixes-interface-duplicate": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["name"]>;
        };
    };
    readonly "interface-duplicate": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["name"]>;
        };
    };
    readonly "union-duplicate": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["name"]>;
        };
    };
    readonly "enum-member-duplicate": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["name"]>;
        };
    };
    readonly "decorator-fail": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["decoratorName", "error"]>;
        };
    };
    /**
     * Program
     */
    readonly "dynamic-import": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Dynamically generated Cadl cannot have imports";
        };
    };
    readonly "invalid-import": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Import paths must reference either a directory, a .cadl file, or .js file";
        };
    };
    readonly "library-not-found": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["path"]>;
        };
    };
    readonly "compiler-version-mismatch": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["basedir", "basedir", "betterCadlServerPath"]>;
        };
    };
    readonly "duplicate-symbol": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["name"]>;
        };
    };
    /**
     * Binder
     */
    readonly "on-build-fail": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["error"]>;
        };
    };
    /**
     * Decorator
     */
    readonly "decorator-wrong-target": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["decorator", "to"]>;
            readonly model: import("./types.js").CallableMessage<["decorator"]>;
            readonly namespacesOrOperations: import("./types.js").CallableMessage<["decorator"]>;
            readonly operationsOrModelProps: import("./types.js").CallableMessage<["decorator"]>;
        };
    };
    /**
     * Mutator
     */
    readonly "add-response": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot add a response to anything except an operation statement.";
        };
    };
    readonly "add-parameter": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot add a parameter to anything except an operation statement.";
        };
    };
    readonly "add-model-property": {
        readonly severity: "error";
        readonly messages: {
            readonly default: "Cannot add a model property to anything except a model statement.";
        };
    };
    readonly "add-model-property-fail": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["propertyName", "propertyTypeName"]>;
        };
    };
    readonly "add-response-type": {
        readonly severity: "error";
        readonly messages: {
            readonly default: import("./types.js").CallableMessage<["responseTypeName", "operationName"]>;
        };
    };
};
export declare type CompilerDiagnostics = TypeOfDiagnostics<typeof diagnostics>;
export declare const createDiagnostic: <C extends "digit-expected" | "hex-digit-expected" | "binary-digit-expected" | "unterminated" | "creating-file" | "invalid-escape-sequence" | "no-new-line-start-triple-quote" | "no-new-line-end-triple-quote" | "triple-quote-indent" | "invalid-character" | "file-not-found" | "file-load" | "multiple-blockless-namespace" | "blockless-namespace-first" | "import-first" | "default-optional" | "token-expected" | "trailing-token" | "unknown-directive" | "reserverd-identifier" | "invalid-directive-location" | "invalid-decorator-location" | "using-invalid-ref" | "invalid-type-ref" | "invalid-template-args" | "intersect-non-model" | "intersect-duplicate-property" | "unknown-identifier" | "unknown-decorator" | "invalid-decorator" | "invalid-ref" | "duplicate-property" | "override-property" | "extend-model" | "is-model" | "spread-model" | "unsupported-default" | "invalid-default-type" | "mixes-interface" | "mixes-interface-duplicate" | "interface-duplicate" | "union-duplicate" | "enum-member-duplicate" | "decorator-fail" | "dynamic-import" | "invalid-import" | "library-not-found" | "compiler-version-mismatch" | "duplicate-symbol" | "on-build-fail" | "decorator-wrong-target" | "add-response" | "add-parameter" | "add-model-property" | "add-model-property-fail" | "add-response-type", M extends keyof {
    "digit-expected": {
        readonly default: "Digit expected.";
    };
    "hex-digit-expected": {
        readonly default: "Hexadecimal digit expected.";
    };
    "binary-digit-expected": {
        readonly default: "Binary digit expected.";
    };
    unterminated: {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "creating-file": {
        readonly default: import("./types.js").CallableMessage<["filename", "error"]>;
    };
    "invalid-escape-sequence": {
        readonly default: "Invalid escape sequence.";
    };
    "no-new-line-start-triple-quote": {
        readonly default: "String content in triple quotes must begin on a new line.";
    };
    "no-new-line-end-triple-quote": {
        readonly default: "Closing triple quotes must begin on a new line.";
    };
    "triple-quote-indent": {
        readonly default: "All lines in triple-quoted string lines must have the same indentation as closing triple quotes.";
    };
    "invalid-character": {
        readonly default: "Invalid character.";
    };
    "file-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "file-load": {
        readonly default: import("./types.js").CallableMessage<["message"]>;
    };
    "multiple-blockless-namespace": {
        readonly default: "Cannot use multiple blockless namespaces.";
    };
    "blockless-namespace-first": {
        readonly default: "Blockless namespaces can't follow other declarations.";
        readonly topLevel: "Blockless namespace can only be top-level.";
    };
    "import-first": {
        readonly default: "Imports must come prior to namespaces or other declarations.";
        readonly topLevel: "Imports must be top-level and come prior to namespaces or other declarations.";
    };
    "default-optional": {
        readonly default: "Cannot use default with non optional properties";
    };
    "token-expected": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
        readonly unexpected: import("./types.js").CallableMessage<["token"]>;
        readonly numericOrStringLiteral: "Expected numeric or string literal";
        readonly identifer: "Identifier expected.";
        readonly expression: "Expression expected.";
        readonly statement: "Statement expected.";
        readonly property: "Property expected.";
        readonly enumMember: "Enum member expected.";
    };
    "trailing-token": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "unknown-directive": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "reserverd-identifier": {
        readonly default: "Keyword cannot be used as identifier.";
    };
    "invalid-directive-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "invalid-decorator-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "using-invalid-ref": {
        readonly default: "Using must refer to a namespace";
        readonly decorator: "Can't use a decorator";
    };
    "invalid-type-ref": {
        readonly default: "Invalid type reference";
        readonly decorator: "Can't put a decorator in a type";
    };
    "invalid-template-args": {
        readonly default: "Invalid template arguments.";
        readonly notTemplate: "Can't pass template arguments to non-templated type";
        readonly tooFew: "Too few template arguments provided.";
        readonly tooMany: "Too many template arguments provided.";
    };
    "intersect-non-model": {
        readonly default: "Cannot intersect non-model types (including union types).";
    };
    "intersect-duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "unknown-identifier": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "unknown-decorator": {
        readonly default: "Unknown decorator";
    };
    "invalid-decorator": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "invalid-ref": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
        readonly inDecorator: import("./types.js").CallableMessage<["id"]>;
        readonly underNamespace: import("./types.js").CallableMessage<["id"]>;
        readonly node: import("./types.js").CallableMessage<["id", "nodeName"]>;
    };
    "duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "override-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "extend-model": {
        readonly default: "Models must extend other models.";
    };
    "is-model": {
        readonly default: "Model `is` must specify another model.";
    };
    "spread-model": {
        readonly default: "Cannot spread properties of non-model type.";
    };
    "unsupported-default": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "invalid-default-type": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "mixes-interface": {
        readonly default: "Interfaces can only mix other interfaces";
    };
    "mixes-interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "union-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "enum-member-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "decorator-fail": {
        readonly default: import("./types.js").CallableMessage<["decoratorName", "error"]>;
    };
    "dynamic-import": {
        readonly default: "Dynamically generated Cadl cannot have imports";
    };
    "invalid-import": {
        readonly default: "Import paths must reference either a directory, a .cadl file, or .js file";
    };
    "library-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "compiler-version-mismatch": {
        readonly default: import("./types.js").CallableMessage<["basedir", "basedir", "betterCadlServerPath"]>;
    };
    "duplicate-symbol": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "on-build-fail": {
        readonly default: import("./types.js").CallableMessage<["error"]>;
    };
    "decorator-wrong-target": {
        readonly default: import("./types.js").CallableMessage<["decorator", "to"]>;
        readonly model: import("./types.js").CallableMessage<["decorator"]>;
        readonly namespacesOrOperations: import("./types.js").CallableMessage<["decorator"]>;
        readonly operationsOrModelProps: import("./types.js").CallableMessage<["decorator"]>;
    };
    "add-response": {
        readonly default: "Cannot add a response to anything except an operation statement.";
    };
    "add-parameter": {
        readonly default: "Cannot add a parameter to anything except an operation statement.";
    };
    "add-model-property": {
        readonly default: "Cannot add a model property to anything except a model statement.";
    };
    "add-model-property-fail": {
        readonly default: import("./types.js").CallableMessage<["propertyName", "propertyTypeName"]>;
    };
    "add-response-type": {
        readonly default: import("./types.js").CallableMessage<["responseTypeName", "operationName"]>;
    };
}[C] = "default">(diag: import("./types.js").DiagnosticReport<{
    "digit-expected": {
        readonly default: "Digit expected.";
    };
    "hex-digit-expected": {
        readonly default: "Hexadecimal digit expected.";
    };
    "binary-digit-expected": {
        readonly default: "Binary digit expected.";
    };
    unterminated: {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "creating-file": {
        readonly default: import("./types.js").CallableMessage<["filename", "error"]>;
    };
    "invalid-escape-sequence": {
        readonly default: "Invalid escape sequence.";
    };
    "no-new-line-start-triple-quote": {
        readonly default: "String content in triple quotes must begin on a new line.";
    };
    "no-new-line-end-triple-quote": {
        readonly default: "Closing triple quotes must begin on a new line.";
    };
    "triple-quote-indent": {
        readonly default: "All lines in triple-quoted string lines must have the same indentation as closing triple quotes.";
    };
    "invalid-character": {
        readonly default: "Invalid character.";
    };
    "file-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "file-load": {
        readonly default: import("./types.js").CallableMessage<["message"]>;
    };
    "multiple-blockless-namespace": {
        readonly default: "Cannot use multiple blockless namespaces.";
    };
    "blockless-namespace-first": {
        readonly default: "Blockless namespaces can't follow other declarations.";
        readonly topLevel: "Blockless namespace can only be top-level.";
    };
    "import-first": {
        readonly default: "Imports must come prior to namespaces or other declarations.";
        readonly topLevel: "Imports must be top-level and come prior to namespaces or other declarations.";
    };
    "default-optional": {
        readonly default: "Cannot use default with non optional properties";
    };
    "token-expected": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
        readonly unexpected: import("./types.js").CallableMessage<["token"]>;
        readonly numericOrStringLiteral: "Expected numeric or string literal";
        readonly identifer: "Identifier expected.";
        readonly expression: "Expression expected.";
        readonly statement: "Statement expected.";
        readonly property: "Property expected.";
        readonly enumMember: "Enum member expected.";
    };
    "trailing-token": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "unknown-directive": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "reserverd-identifier": {
        readonly default: "Keyword cannot be used as identifier.";
    };
    "invalid-directive-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "invalid-decorator-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "using-invalid-ref": {
        readonly default: "Using must refer to a namespace";
        readonly decorator: "Can't use a decorator";
    };
    "invalid-type-ref": {
        readonly default: "Invalid type reference";
        readonly decorator: "Can't put a decorator in a type";
    };
    "invalid-template-args": {
        readonly default: "Invalid template arguments.";
        readonly notTemplate: "Can't pass template arguments to non-templated type";
        readonly tooFew: "Too few template arguments provided.";
        readonly tooMany: "Too many template arguments provided.";
    };
    "intersect-non-model": {
        readonly default: "Cannot intersect non-model types (including union types).";
    };
    "intersect-duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "unknown-identifier": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "unknown-decorator": {
        readonly default: "Unknown decorator";
    };
    "invalid-decorator": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "invalid-ref": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
        readonly inDecorator: import("./types.js").CallableMessage<["id"]>;
        readonly underNamespace: import("./types.js").CallableMessage<["id"]>;
        readonly node: import("./types.js").CallableMessage<["id", "nodeName"]>;
    };
    "duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "override-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "extend-model": {
        readonly default: "Models must extend other models.";
    };
    "is-model": {
        readonly default: "Model `is` must specify another model.";
    };
    "spread-model": {
        readonly default: "Cannot spread properties of non-model type.";
    };
    "unsupported-default": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "invalid-default-type": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "mixes-interface": {
        readonly default: "Interfaces can only mix other interfaces";
    };
    "mixes-interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "union-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "enum-member-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "decorator-fail": {
        readonly default: import("./types.js").CallableMessage<["decoratorName", "error"]>;
    };
    "dynamic-import": {
        readonly default: "Dynamically generated Cadl cannot have imports";
    };
    "invalid-import": {
        readonly default: "Import paths must reference either a directory, a .cadl file, or .js file";
    };
    "library-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "compiler-version-mismatch": {
        readonly default: import("./types.js").CallableMessage<["basedir", "basedir", "betterCadlServerPath"]>;
    };
    "duplicate-symbol": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "on-build-fail": {
        readonly default: import("./types.js").CallableMessage<["error"]>;
    };
    "decorator-wrong-target": {
        readonly default: import("./types.js").CallableMessage<["decorator", "to"]>;
        readonly model: import("./types.js").CallableMessage<["decorator"]>;
        readonly namespacesOrOperations: import("./types.js").CallableMessage<["decorator"]>;
        readonly operationsOrModelProps: import("./types.js").CallableMessage<["decorator"]>;
    };
    "add-response": {
        readonly default: "Cannot add a response to anything except an operation statement.";
    };
    "add-parameter": {
        readonly default: "Cannot add a parameter to anything except an operation statement.";
    };
    "add-model-property": {
        readonly default: "Cannot add a model property to anything except a model statement.";
    };
    "add-model-property-fail": {
        readonly default: import("./types.js").CallableMessage<["propertyName", "propertyTypeName"]>;
    };
    "add-response-type": {
        readonly default: import("./types.js").CallableMessage<["responseTypeName", "operationName"]>;
    };
}, C, M>) => import("./types.js").Diagnostic, reportDiagnostic: <C extends "digit-expected" | "hex-digit-expected" | "binary-digit-expected" | "unterminated" | "creating-file" | "invalid-escape-sequence" | "no-new-line-start-triple-quote" | "no-new-line-end-triple-quote" | "triple-quote-indent" | "invalid-character" | "file-not-found" | "file-load" | "multiple-blockless-namespace" | "blockless-namespace-first" | "import-first" | "default-optional" | "token-expected" | "trailing-token" | "unknown-directive" | "reserverd-identifier" | "invalid-directive-location" | "invalid-decorator-location" | "using-invalid-ref" | "invalid-type-ref" | "invalid-template-args" | "intersect-non-model" | "intersect-duplicate-property" | "unknown-identifier" | "unknown-decorator" | "invalid-decorator" | "invalid-ref" | "duplicate-property" | "override-property" | "extend-model" | "is-model" | "spread-model" | "unsupported-default" | "invalid-default-type" | "mixes-interface" | "mixes-interface-duplicate" | "interface-duplicate" | "union-duplicate" | "enum-member-duplicate" | "decorator-fail" | "dynamic-import" | "invalid-import" | "library-not-found" | "compiler-version-mismatch" | "duplicate-symbol" | "on-build-fail" | "decorator-wrong-target" | "add-response" | "add-parameter" | "add-model-property" | "add-model-property-fail" | "add-response-type", M extends keyof {
    "digit-expected": {
        readonly default: "Digit expected.";
    };
    "hex-digit-expected": {
        readonly default: "Hexadecimal digit expected.";
    };
    "binary-digit-expected": {
        readonly default: "Binary digit expected.";
    };
    unterminated: {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "creating-file": {
        readonly default: import("./types.js").CallableMessage<["filename", "error"]>;
    };
    "invalid-escape-sequence": {
        readonly default: "Invalid escape sequence.";
    };
    "no-new-line-start-triple-quote": {
        readonly default: "String content in triple quotes must begin on a new line.";
    };
    "no-new-line-end-triple-quote": {
        readonly default: "Closing triple quotes must begin on a new line.";
    };
    "triple-quote-indent": {
        readonly default: "All lines in triple-quoted string lines must have the same indentation as closing triple quotes.";
    };
    "invalid-character": {
        readonly default: "Invalid character.";
    };
    "file-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "file-load": {
        readonly default: import("./types.js").CallableMessage<["message"]>;
    };
    "multiple-blockless-namespace": {
        readonly default: "Cannot use multiple blockless namespaces.";
    };
    "blockless-namespace-first": {
        readonly default: "Blockless namespaces can't follow other declarations.";
        readonly topLevel: "Blockless namespace can only be top-level.";
    };
    "import-first": {
        readonly default: "Imports must come prior to namespaces or other declarations.";
        readonly topLevel: "Imports must be top-level and come prior to namespaces or other declarations.";
    };
    "default-optional": {
        readonly default: "Cannot use default with non optional properties";
    };
    "token-expected": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
        readonly unexpected: import("./types.js").CallableMessage<["token"]>;
        readonly numericOrStringLiteral: "Expected numeric or string literal";
        readonly identifer: "Identifier expected.";
        readonly expression: "Expression expected.";
        readonly statement: "Statement expected.";
        readonly property: "Property expected.";
        readonly enumMember: "Enum member expected.";
    };
    "trailing-token": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "unknown-directive": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "reserverd-identifier": {
        readonly default: "Keyword cannot be used as identifier.";
    };
    "invalid-directive-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "invalid-decorator-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "using-invalid-ref": {
        readonly default: "Using must refer to a namespace";
        readonly decorator: "Can't use a decorator";
    };
    "invalid-type-ref": {
        readonly default: "Invalid type reference";
        readonly decorator: "Can't put a decorator in a type";
    };
    "invalid-template-args": {
        readonly default: "Invalid template arguments.";
        readonly notTemplate: "Can't pass template arguments to non-templated type";
        readonly tooFew: "Too few template arguments provided.";
        readonly tooMany: "Too many template arguments provided.";
    };
    "intersect-non-model": {
        readonly default: "Cannot intersect non-model types (including union types).";
    };
    "intersect-duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "unknown-identifier": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "unknown-decorator": {
        readonly default: "Unknown decorator";
    };
    "invalid-decorator": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "invalid-ref": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
        readonly inDecorator: import("./types.js").CallableMessage<["id"]>;
        readonly underNamespace: import("./types.js").CallableMessage<["id"]>;
        readonly node: import("./types.js").CallableMessage<["id", "nodeName"]>;
    };
    "duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "override-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "extend-model": {
        readonly default: "Models must extend other models.";
    };
    "is-model": {
        readonly default: "Model `is` must specify another model.";
    };
    "spread-model": {
        readonly default: "Cannot spread properties of non-model type.";
    };
    "unsupported-default": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "invalid-default-type": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "mixes-interface": {
        readonly default: "Interfaces can only mix other interfaces";
    };
    "mixes-interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "union-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "enum-member-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "decorator-fail": {
        readonly default: import("./types.js").CallableMessage<["decoratorName", "error"]>;
    };
    "dynamic-import": {
        readonly default: "Dynamically generated Cadl cannot have imports";
    };
    "invalid-import": {
        readonly default: "Import paths must reference either a directory, a .cadl file, or .js file";
    };
    "library-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "compiler-version-mismatch": {
        readonly default: import("./types.js").CallableMessage<["basedir", "basedir", "betterCadlServerPath"]>;
    };
    "duplicate-symbol": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "on-build-fail": {
        readonly default: import("./types.js").CallableMessage<["error"]>;
    };
    "decorator-wrong-target": {
        readonly default: import("./types.js").CallableMessage<["decorator", "to"]>;
        readonly model: import("./types.js").CallableMessage<["decorator"]>;
        readonly namespacesOrOperations: import("./types.js").CallableMessage<["decorator"]>;
        readonly operationsOrModelProps: import("./types.js").CallableMessage<["decorator"]>;
    };
    "add-response": {
        readonly default: "Cannot add a response to anything except an operation statement.";
    };
    "add-parameter": {
        readonly default: "Cannot add a parameter to anything except an operation statement.";
    };
    "add-model-property": {
        readonly default: "Cannot add a model property to anything except a model statement.";
    };
    "add-model-property-fail": {
        readonly default: import("./types.js").CallableMessage<["propertyName", "propertyTypeName"]>;
    };
    "add-response-type": {
        readonly default: import("./types.js").CallableMessage<["responseTypeName", "operationName"]>;
    };
}[C] = "default">(program: import("./program.js").Program, diag: import("./types.js").DiagnosticReport<{
    "digit-expected": {
        readonly default: "Digit expected.";
    };
    "hex-digit-expected": {
        readonly default: "Hexadecimal digit expected.";
    };
    "binary-digit-expected": {
        readonly default: "Binary digit expected.";
    };
    unterminated: {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "creating-file": {
        readonly default: import("./types.js").CallableMessage<["filename", "error"]>;
    };
    "invalid-escape-sequence": {
        readonly default: "Invalid escape sequence.";
    };
    "no-new-line-start-triple-quote": {
        readonly default: "String content in triple quotes must begin on a new line.";
    };
    "no-new-line-end-triple-quote": {
        readonly default: "Closing triple quotes must begin on a new line.";
    };
    "triple-quote-indent": {
        readonly default: "All lines in triple-quoted string lines must have the same indentation as closing triple quotes.";
    };
    "invalid-character": {
        readonly default: "Invalid character.";
    };
    "file-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "file-load": {
        readonly default: import("./types.js").CallableMessage<["message"]>;
    };
    "multiple-blockless-namespace": {
        readonly default: "Cannot use multiple blockless namespaces.";
    };
    "blockless-namespace-first": {
        readonly default: "Blockless namespaces can't follow other declarations.";
        readonly topLevel: "Blockless namespace can only be top-level.";
    };
    "import-first": {
        readonly default: "Imports must come prior to namespaces or other declarations.";
        readonly topLevel: "Imports must be top-level and come prior to namespaces or other declarations.";
    };
    "default-optional": {
        readonly default: "Cannot use default with non optional properties";
    };
    "token-expected": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
        readonly unexpected: import("./types.js").CallableMessage<["token"]>;
        readonly numericOrStringLiteral: "Expected numeric or string literal";
        readonly identifer: "Identifier expected.";
        readonly expression: "Expression expected.";
        readonly statement: "Statement expected.";
        readonly property: "Property expected.";
        readonly enumMember: "Enum member expected.";
    };
    "trailing-token": {
        readonly default: import("./types.js").CallableMessage<["token"]>;
    };
    "unknown-directive": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "reserverd-identifier": {
        readonly default: "Keyword cannot be used as identifier.";
    };
    "invalid-directive-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "invalid-decorator-location": {
        readonly default: import("./types.js").CallableMessage<["nodeName"]>;
    };
    "using-invalid-ref": {
        readonly default: "Using must refer to a namespace";
        readonly decorator: "Can't use a decorator";
    };
    "invalid-type-ref": {
        readonly default: "Invalid type reference";
        readonly decorator: "Can't put a decorator in a type";
    };
    "invalid-template-args": {
        readonly default: "Invalid template arguments.";
        readonly notTemplate: "Can't pass template arguments to non-templated type";
        readonly tooFew: "Too few template arguments provided.";
        readonly tooMany: "Too many template arguments provided.";
    };
    "intersect-non-model": {
        readonly default: "Cannot intersect non-model types (including union types).";
    };
    "intersect-duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "unknown-identifier": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "unknown-decorator": {
        readonly default: "Unknown decorator";
    };
    "invalid-decorator": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
    };
    "invalid-ref": {
        readonly default: import("./types.js").CallableMessage<["id"]>;
        readonly inDecorator: import("./types.js").CallableMessage<["id"]>;
        readonly underNamespace: import("./types.js").CallableMessage<["id"]>;
        readonly node: import("./types.js").CallableMessage<["id", "nodeName"]>;
    };
    "duplicate-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "override-property": {
        readonly default: import("./types.js").CallableMessage<["propName"]>;
    };
    "extend-model": {
        readonly default: "Models must extend other models.";
    };
    "is-model": {
        readonly default: "Model `is` must specify another model.";
    };
    "spread-model": {
        readonly default: "Cannot spread properties of non-model type.";
    };
    "unsupported-default": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "invalid-default-type": {
        readonly default: import("./types.js").CallableMessage<["type"]>;
    };
    "mixes-interface": {
        readonly default: "Interfaces can only mix other interfaces";
    };
    "mixes-interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "interface-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "union-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "enum-member-duplicate": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "decorator-fail": {
        readonly default: import("./types.js").CallableMessage<["decoratorName", "error"]>;
    };
    "dynamic-import": {
        readonly default: "Dynamically generated Cadl cannot have imports";
    };
    "invalid-import": {
        readonly default: "Import paths must reference either a directory, a .cadl file, or .js file";
    };
    "library-not-found": {
        readonly default: import("./types.js").CallableMessage<["path"]>;
    };
    "compiler-version-mismatch": {
        readonly default: import("./types.js").CallableMessage<["basedir", "basedir", "betterCadlServerPath"]>;
    };
    "duplicate-symbol": {
        readonly default: import("./types.js").CallableMessage<["name"]>;
    };
    "on-build-fail": {
        readonly default: import("./types.js").CallableMessage<["error"]>;
    };
    "decorator-wrong-target": {
        readonly default: import("./types.js").CallableMessage<["decorator", "to"]>;
        readonly model: import("./types.js").CallableMessage<["decorator"]>;
        readonly namespacesOrOperations: import("./types.js").CallableMessage<["decorator"]>;
        readonly operationsOrModelProps: import("./types.js").CallableMessage<["decorator"]>;
    };
    "add-response": {
        readonly default: "Cannot add a response to anything except an operation statement.";
    };
    "add-parameter": {
        readonly default: "Cannot add a parameter to anything except an operation statement.";
    };
    "add-model-property": {
        readonly default: "Cannot add a model property to anything except a model statement.";
    };
    "add-model-property-fail": {
        readonly default: import("./types.js").CallableMessage<["propertyName", "propertyTypeName"]>;
    };
    "add-response-type": {
        readonly default: import("./types.js").CallableMessage<["responseTypeName", "operationName"]>;
    };
}, C, M>) => void;
export {};
//# sourceMappingURL=messages.d.ts.map