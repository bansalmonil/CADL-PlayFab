import { nonAsciiIdentifierMap } from "./nonascii.js";
export function utf16CodeUnits(codePoint) {
    return codePoint >= 0x10000 ? 2 : 1;
}
export function isLineBreak(ch) {
    return ch === 10 /* LineFeed */ || ch == 13 /* CarriageReturn */;
}
export function isAsciiWhiteSpaceSingleLine(ch) {
    return (ch === 32 /* Space */ ||
        ch === 9 /* Tab */ ||
        ch === 11 /* VerticalTab */ ||
        ch === 12 /* FormFeed */);
}
export function isNonAsciiWhiteSpaceSingleLine(ch) {
    return (ch === 133 /* NextLine */ || // not considered a line break
        ch === 8206 /* LeftToRightMark */ ||
        ch === 8207 /* RightToLeftMark */ ||
        ch === 8232 /* LineSeparator */ ||
        ch === 8233 /* ParagraphSeparator */);
}
export function isWhiteSpaceSingleLine(ch) {
    return (isAsciiWhiteSpaceSingleLine(ch) ||
        (ch > 127 /* MaxAscii */ && isNonAsciiWhiteSpaceSingleLine(ch)));
}
export function isDigit(ch) {
    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
}
export function isHexDigit(ch) {
    return (isDigit(ch) || (ch >= 65 /* A */ && ch <= 70 /* F */) || (ch >= 97 /* a */ && ch <= 102 /* f */));
}
export function isBinaryDigit(ch) {
    return ch === 48 /* _0 */ || ch === 49 /* _1 */;
}
export function isLowercaseAsciiLetter(ch) {
    return ch >= 97 /* a */ && ch <= 122 /* z */;
}
export function isAsciiIdentifierStart(ch) {
    return ((ch >= 65 /* A */ && ch <= 90 /* Z */) ||
        (ch >= 97 /* a */ && ch <= 122 /* z */) ||
        ch === 36 /* $ */ ||
        ch === 95 /* _ */);
}
export function isAsciiIdentifierContinue(ch) {
    return ((ch >= 65 /* A */ && ch <= 90 /* Z */) ||
        (ch >= 97 /* a */ && ch <= 122 /* z */) ||
        (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) ||
        ch === 36 /* $ */ ||
        ch === 95 /* _ */);
}
export function isIdentifierStart(codePoint) {
    return (isAsciiIdentifierStart(codePoint) ||
        (codePoint > 127 /* MaxAscii */ && isNonAsciiIdentifierCharacter(codePoint)));
}
export function isIdentifierContinue(codePoint) {
    return (isAsciiIdentifierContinue(codePoint) ||
        (codePoint > 127 /* MaxAscii */ && isNonAsciiIdentifierCharacter(codePoint)));
}
export function isNonAsciiIdentifierCharacter(codePoint) {
    return lookupInNonAsciiMap(codePoint, nonAsciiIdentifierMap);
}
function lookupInNonAsciiMap(codePoint, map) {
    // Perform binary search in one of the Unicode range maps
    let lo = 0;
    let hi = map.length;
    let mid;
    while (lo + 1 < hi) {
        mid = lo + (hi - lo) / 2;
        // mid has to be even to catch a range's beginning
        mid -= mid % 2;
        if (map[mid] <= codePoint && codePoint <= map[mid + 1]) {
            return true;
        }
        if (codePoint < map[mid]) {
            hi = mid;
        }
        else {
            lo = mid + 2;
        }
    }
    return false;
}
//# sourceMappingURL=charcode.js.map