import { computeTargetLocation } from "./diagnostics.js";
const LogLevels = {
    debug: 10,
    verbose: 20,
    info: 30,
    warning: 40,
    error: 50,
};
const defaultOptions = {
    level: "info",
};
export function createLogger(options) {
    const config = { ...defaultOptions, ...options };
    function log(log) {
        if (LogLevels[config.level] >= LogLevels[log.level]) {
            config.sink.log(processLog(log));
        }
    }
    return {
        log,
        debug: (message) => log({ level: "debug", message }),
        verbose: (message) => log({ level: "verbose", message }),
        info: (message) => log({ level: "info", message }),
        warn: (message) => log({ level: "warning", message }),
        error: (message) => log({ level: "error", message }),
    };
}
function processLog(log) {
    return {
        level: log.level,
        code: log.code,
        message: log.message,
        sourceLocation: computeTargetLocation(log.target),
    };
}
export function createConsoleSink() {
    function log(data) {
        console.log(formatLog(data));
    }
    return {
        log,
    };
}
export function formatLog(log) {
    const code = log.code ? ` ${log.code}` : "";
    const level = log.level;
    const content = `${level}${code}: ${log.message}`;
    const location = log.sourceLocation;
    if (location === null || location === void 0 ? void 0 : location.file) {
        const formattedLocation = formatSourceLocation(location);
        return `${formattedLocation} - ${content}`;
    }
    else {
        return content;
    }
}
export function formatSourceLocation(location) {
    var _a;
    const pos = location.file.getLineAndCharacterOfPosition((_a = location.pos) !== null && _a !== void 0 ? _a : 0);
    const line = pos.line + 1;
    const col = pos.character + 1;
    const path = location.file.path;
    return `${path}:${line}:${col}`;
}
//# sourceMappingURL=logger.js.map