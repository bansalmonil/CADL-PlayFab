import { Program } from "./program.js";
import { CadlScriptNode, JsSourceFile, Node, Sym, SymbolTable } from "./types.js";
declare const SymbolTable: {
    new (entries?: readonly (readonly [string, Sym])[] | null | undefined): {
        duplicates: Set<Sym>;
        set(key: string, value: Sym): any;
        clear(): void;
        delete(key: string): boolean;
        forEach(callbackfn: (value: Sym, key: string, map: Map<string, Sym>) => void, thisArg?: any): void;
        get(key: string): Sym | undefined;
        has(key: string): boolean;
        readonly size: number;
        entries(): IterableIterator<[string, Sym]>;
        keys(): IterableIterator<string>;
        values(): IterableIterator<Sym>;
        [Symbol.iterator](): IterableIterator<[string, Sym]>;
        readonly [Symbol.toStringTag]: string;
    };
    new (iterable: Iterable<readonly [string, Sym]>): {
        duplicates: Set<Sym>;
        set(key: string, value: Sym): any;
        clear(): void;
        delete(key: string): boolean;
        forEach(callbackfn: (value: Sym, key: string, map: Map<string, Sym>) => void, thisArg?: any): void;
        get(key: string): Sym | undefined;
        has(key: string): boolean;
        readonly size: number;
        entries(): IterableIterator<[string, Sym]>;
        keys(): IterableIterator<string>;
        values(): IterableIterator<Sym>;
        [Symbol.iterator](): IterableIterator<[string, Sym]>;
        readonly [Symbol.toStringTag]: string;
    };
    readonly [Symbol.species]: MapConstructor;
};
export interface Binder {
    bindSourceFile(sourceFile: CadlScriptNode): void;
    bindJsSourceFile(sourceFile: JsSourceFile): void;
    bindNode(node: Node): void;
}
export declare function createSymbolTable(): SymbolTable;
export interface BinderOptions {
    initialParentNode?: Node;
}
export declare function createBinder(program: Program, options?: BinderOptions): Binder;
export {};
//# sourceMappingURL=binder.d.ts.map