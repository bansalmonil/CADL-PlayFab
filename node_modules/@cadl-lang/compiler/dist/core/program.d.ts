import { Checker } from "./checker.js";
import { CompilerOptions } from "./options.js";
import { CadlScriptNode, CompilerHost, Diagnostic, JsSourceFile, LiteralType, Logger, SourceFile, SymbolTable } from "./types.js";
export interface Program {
    compilerOptions: CompilerOptions;
    mainFile?: CadlScriptNode;
    /** All source files in the program, keyed by their file path. */
    sourceFiles: Map<string, CadlScriptNode>;
    jsSourceFiles: Map<string, JsSourceFile>;
    literalTypes: Map<string | number | boolean, LiteralType>;
    host: CompilerHost;
    logger: Logger;
    checker?: Checker;
    readonly diagnostics: readonly Diagnostic[];
    loadCadlScript(cadlScript: SourceFile): Promise<CadlScriptNode>;
    evalCadlScript(cadlScript: string): void;
    onBuild(cb: (program: Program) => void): Promise<void> | void;
    getOption(key: string): string | undefined;
    stateSet(key: Symbol): Set<any>;
    stateMap(key: Symbol): Map<any, any>;
    hasError(): boolean;
    reportDiagnostic(diagnostic: Diagnostic): void;
    reportDiagnostics(diagnostics: Diagnostic[]): void;
    reportDuplicateSymbols(symbols: SymbolTable): void;
}
export declare function createProgram(host: CompilerHost, mainFile: string, options?: CompilerOptions): Promise<Program>;
export declare function compile(mainFile: string, host: CompilerHost, options?: CompilerOptions): Promise<Program>;
//# sourceMappingURL=program.d.ts.map