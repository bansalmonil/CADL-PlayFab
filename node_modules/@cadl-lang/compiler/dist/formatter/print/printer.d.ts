import prettier, { AstPath, Doc, Printer } from "prettier";
import { AliasStatementNode, Comment, DecoratorExpressionNode, DirectiveExpressionNode, EnumMemberNode, EnumStatementNode, InterfaceStatementNode, IntersectionExpressionNode, ModelExpressionNode, ModelPropertyNode, ModelStatementNode, NamespaceStatementNode, Node, NumericLiteralNode, OperationStatementNode, StringLiteralNode, TypeReferenceNode, UnionExpressionNode, UnionStatementNode, UnionVariantNode } from "../../core/types.js";
import { CadlPrettierOptions, DecorableNode, PrettierChildPrint } from "./types.js";
export declare const cadlPrinter: Printer<Node>;
export declare function printCadl(path: AstPath<Node>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.Doc;
export declare function printNode(path: AstPath<Node>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.Doc;
export declare function printAliasStatement(path: AstPath<AliasStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function canAttachComment(node: Node): boolean;
export declare function printComment(commentPath: AstPath<Node | Comment>, options: CadlPrettierOptions): Doc;
export declare function printDecorators(path: AstPath<DecorableNode>, options: object, print: PrettierChildPrint, { tryInline }: {
    tryInline: boolean;
}): {
    decorators: prettier.Doc;
    multiline: boolean;
};
export declare function printDecorator(path: AstPath<DecoratorExpressionNode>, options: object, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printDirectives(path: AstPath<Node>, options: object, print: PrettierChildPrint): "" | prettier.doc.builders.Group;
export declare function printDirective(path: AstPath<DirectiveExpressionNode>, options: object, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printDirectiveArgs(path: AstPath<DirectiveExpressionNode>, options: object, print: PrettierChildPrint): "" | prettier.doc.builders.Concat;
export declare function printEnumStatement(path: AstPath<EnumStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printEnumMember(path: AstPath<EnumMemberNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printUnionStatement(path: AstPath<UnionStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printUnionVariantsBlock(path: AstPath<UnionStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Group | "{}";
export declare function printUnionVariant(path: AstPath<UnionVariantNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printInterfaceStatement(path: AstPath<InterfaceStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printInterfaceMembers(path: AstPath<InterfaceStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Group | "{}";
/**
 * Handle printing an intersection node.
 * @example `Foo & Bar` or `{foo: string} & {bar: string}`
 *
 * @param path Prettier AST Path.
 * @param options Prettier options
 * @param print Prettier child print callback.
 * @returns Prettier document.
 */
export declare function printIntersection(path: AstPath<IntersectionExpressionNode>, options: object, print: PrettierChildPrint): prettier.doc.builders.Group;
export declare function printModelExpression(path: AstPath<ModelExpressionNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Group;
export declare function printModelStatement(path: AstPath<ModelStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printModelProperty(path: AstPath<ModelPropertyNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printNamespaceStatement(path: AstPath<NamespaceStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Doc;
export declare function printOperationStatement(path: AstPath<OperationStatementNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Concat;
export declare function printStatementSequence<T extends Node>(path: AstPath<T>, options: CadlPrettierOptions, print: PrettierChildPrint, property: keyof T): prettier.doc.builders.Concat;
export declare function printUnion(path: AstPath<UnionExpressionNode>, options: object, print: PrettierChildPrint): prettier.doc.builders.Concat | prettier.doc.builders.Group;
export declare function printTypeReference(path: prettier.AstPath<TypeReferenceNode>, options: CadlPrettierOptions, print: PrettierChildPrint): prettier.doc.builders.Doc;
export declare function printStringLiteral(path: prettier.AstPath<StringLiteralNode>, options: CadlPrettierOptions): prettier.doc.builders.Doc;
export declare function printNumberLiteral(path: prettier.AstPath<NumericLiteralNode>, options: CadlPrettierOptions): prettier.doc.builders.Doc;
//# sourceMappingURL=printer.d.ts.map